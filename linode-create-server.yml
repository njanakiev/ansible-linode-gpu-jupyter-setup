---
- name: Create Linode server.
  hosts: localhost
  gather_facts: false
  vars:
    linode_token: "{{ lookup('env', 'LINODE_ACCESS_TOKEN') }}"
    root_password: "{{ lookup('env', 'SERVER_ROOT_PASSWORD') }}"
  
  vars_files:
  - config.yml

  pre_tasks:
  - name: Create Linode server.
    linode.cloud.instance:
      label: "{{ server_name }}"
      api_token: "{{ linode_token }}"
      type: "{{ server_type }}"
      region: "{{ server_region }}"
      image: "{{ server_image }}"
      root_pass: "{{ root_password }}"
      authorized_keys: "{{ ssh_keys }}"
      tags:
      - project=linode-jupyter-setup
      state: present
    register: server

  - name: Refresh inventory after adding server.
    meta: refresh_inventory

  - name: Remove host keys of servers.
    known_hosts:
      name: "{{ server.instance.ipv4 }}"
      path: ~/.ssh/known_hosts
      state: absent

  - name: Wait until server is ready.
    wait_for:
      host: "{{ server.instance.ipv4[0] }}"
      port: 22
      search_regex: OpenSSH
      delay: 2
      timeout: 300


- name: Setup server.
  hosts: all
  user: root
  gather_facts: false
  vars:
    username: "{{ lookup('env', 'SERVER_USERNAME') }}"
    password: "{{ lookup('env', 'SERVER_PASSWORD') }}"
    is_gpu: "{{ server_type == 'g1-gpu-rtx6000-1' }}"

  vars_files:
  - config.yml

  tasks:
  - import_tasks: tasks/install-cuda-ubuntu20.04.yml
    when: is_gpu

  - name: "Create user {{ username }}."
    user:
      name: "{{ username }}"
      password: "{{ password | password_hash('sha512') }}"
      groups: sudo
      shell: /bin/bash
      append: true

  - name: "Add SSH key to {{ username }}."
    authorized_key:
      user: "{{ username }}"
      state: present
      key: "{{ lookup('file', ssh_keys) }}"

  - name: Add Python repository.
    apt_repository:
      repo: 'ppa:deadsnakes/ppa'

  - name: Install Python.
    apt:
      name: "{{ item }}"
      state: present
      update_cache: true
    loop:
    - python3.9
    - python3.9-dev
    - python-is-python3
    - python3-pip

  - name: Copy requirements.txt for Python.
    template:
      src: jupyter/requirements.txt.j2
      dest: /root/requirements.txt

  - name: Install requirements.txt.
    pip:
      requirements: /root/requirements.txt

  - import_tasks: tasks/install-jupyter-service.yml

  - name: Install packages.
    apt:
      name: "{{ item }}"
      state: present
      update_cache: true
      cache_valid_time: 3600
      install_recommends: false
    loop:
    - tree
    - htop

  - name: Reboot server.
    reboot:
    when: is_gpu
